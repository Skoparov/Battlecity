#ifndef ECS_POLYMORPH_IMPL
#define ECS_POLYMORPH_IMPL

#include "polymorph.h"

namespace ecs
{

class polymorph_empty : public std::exception{};

namespace _detail
{

class base_type_storage
{
    template< typename type >
    friend class type_storage;

private:
    struct access{};

protected:
    explicit base_type_storage( const access& ){}

public:
    virtual const std::type_info&  type_info() const noexcept = 0;
    virtual ~base_type_storage() = default;
};

template< typename type >
class type_storage final : public base_type_storage
{
    friend class ecs::polymorph;
    using base_type = type;
    using base_unref_type = typename std::remove_reference< type >::type;

public:
    type_storage() = delete;

private:
    explicit type_storage( const base_unref_type& data ) :
        base_type_storage( base_type_storage::access{} ), m_data( data ){}

    explicit type_storage( base_unref_type&& data ) :
        base_type_storage( base_type_storage::access{} ), m_data( std::move( data ) ){}

    static std::unique_ptr< type_storage< type > > create( const base_unref_type& data )
    {
        return std::unique_ptr< type_storage< type > >( new type_storage< type >{ data } );
    }

    static std::unique_ptr< type_storage< type > > create( base_unref_type&& data )
    {
        return std::unique_ptr< type_storage< type > >( new type_storage< type >{ std::move( data ) } );
    }

    const std::type_info& type_info() const noexcept{ return typeid( base_type ); }

public:
    void set( const base_unref_type& data ){ m_data = data; }
    void set( base_unref_type&& data ){ m_data = std::move( data ); }

    const base_type& get() const{ return m_data; }
    base_type& get(){ return m_data; }

private:
    base_type m_data;
};

template< typename type >
type_storage< type >* try_cast( const std::unique_ptr< _detail::base_type_storage >& data )
{
    auto data_casted = dynamic_cast< type_storage< type >* >( data.get() );
    if( !data_casted )
    {
        throw std::bad_cast{};
    }

    return data_casted;
}

template< typename type >
using type_storage_t = _detail::type_storage< typename std::decay< type >::type >;

}// detail

template< typename type, typename >
polymorph::polymorph( type&& t ) :
    m_data( _detail::type_storage_t< type >::create( std::forward< type >( t ) ) ){}

template< typename type, typename >
polymorph& polymorph::operator=( type&& t )
{
    m_data = _detail::type_storage_t< type >::create( std::forward< type >( t ) );
    return *this;
}

template< typename type >
type& polymorph::get()
{
    if( empty() )
    {
        throw polymorph_empty{};
    }

    return _detail::try_cast< type >( m_data )->get();
}

template< typename type >
const type& polymorph::get() const
{
    if( empty() )
    {
        throw polymorph_empty{};
    }

    return _detail::try_cast< type >( m_data )->get();
}

template< class type >
type& polymorph::get_unsafe() noexcept
{
    return static_cast< _detail::type_storage< type >* >( m_data.get() )->get();
}

template< class type >
const type& polymorph::get_unsafe() const noexcept
{
    return static_cast< _detail::type_storage< type >* >( m_data.get() )->get();
}

template< typename type >
bool polymorph::check_type() const noexcept
{
    return empty()? false : ( typeid( type ) == m_data->type_info() );
}

}// ecs

#endif
